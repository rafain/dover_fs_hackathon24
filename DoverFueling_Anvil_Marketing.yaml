correct_dependency_ids: {}
modules: []
exported_table_schema: []
services:
- source: /runtime/services/tables.yml
  client_config: {}
  server_config: {}
forms:
- container:
    type: ColumnPanel
    properties: {col_widths: '{"OFLSBP":45}'}
  components:
  - name: product_display
    properties: {}
    type: ColumnPanel
    layout_properties: {grid_position: 'JATJEY,OFLSBP'}
    components:
    - name: video_player
      properties: {autoplay: true, loop: true, mute: true, youtube_id: XbMYHQ79yTo,
        height: '500'}
      type: YouTubeVideo
      layout_properties: {grid_position: 'EJWMUQ,WBVSBB'}
    - name: col_prod1
      properties: {}
      type: ColumnPanel
      layout_properties: {grid_position: 'VXNGBH,GGYYOW SBOOHP,SBBNVI'}
      components:
      - name: img_prod1
        properties: {height: '500'}
        type: Image
        layout_properties: {grid_position: 'TFZWEM,KFQSVT'}
      - name: name_prod1
        properties: {font_size: 40}
        type: RichText
        layout_properties: {grid_position: 'HMWLLH,THJABA'}
      - name: price_prod1
        properties: {font_size: 20}
        type: RichText
        layout_properties: {grid_position: 'CVFSGL,UZPKGM'}
      - name: buy_btn_prod1
        properties: {text: ADD TO CART, font_size: 18}
        type: Button
        layout_properties: {grid_position: 'ZPOUXB,IBWIFN'}
        event_bindings: {click: buy_btn_prod1_click}
    - name: remove_prod1
      properties: {text: REMOVE, visible: false}
      type: Button
      layout_properties: {grid_position: 'VXNGBH,GGYYOW CRADHM,KTPUGS'}
      event_bindings: {click: remove_prod1_click}
    - name: column_panel_2
      properties: {}
      type: ColumnPanel
      layout_properties: {grid_position: 'VXNGBH,ITRTAV EVMVVR,HWNTJV'}
      components:
      - name: img_prod2
        properties: {height: '500'}
        type: Image
        layout_properties: {grid_position: 'COKICT,YOATDX'}
      - name: name_prod2
        properties: {font_size: 40, format: markdown, font: ''}
        type: RichText
        layout_properties: {grid_position: 'IYQMTK,YVNBAH'}
        data_bindings: []
      - name: price_prod2
        properties: {font_size: 20}
        type: RichText
        layout_properties: {grid_position: 'BKOBOG,LBQXUH'}
      - name: buy_btn_prod2
        properties: {text: ADD TO CART, font_size: 18}
        type: Button
        layout_properties: {grid_position: 'SPJFCE,AXNTGT'}
        event_bindings: {click: buy_btn_prod2_click}
    - name: remove_prod2
      properties: {text: 'REMOVE ', visible: false}
      type: Button
      layout_properties: {grid_position: 'VXNGBH,ITRTAV DYTHCB,WYOKUS'}
      event_bindings: {click: remove_prod2_click}
    - name: column_panel_1
      properties: {}
      type: ColumnPanel
      layout_properties: {grid_position: 'GWJZZD,MOFBXO'}
      components:
      - name: prev_btn
        properties: {text: '', icon: 'fa:arrow-left', visible: false, font_size: 25}
        type: Button
        layout_properties: {grid_position: 'RSJKXT,RXWFNX'}
        event_bindings: {click: prev_btn_click}
      - name: next_btn
        properties: {text: '', icon: 'fa:arrow-right', font_size: 25}
        type: Button
        layout_properties: {grid_position: 'RSJKXT,JTULKP'}
        event_bindings: {click: next_btn_click}
  - name: label_total_amount
    properties: {text: $0.00, font_size: 50}
    type: Label
    layout_properties: {grid_position: 'FTIEUY,WPJFOA ZPMLVD,PITLAT'}
  - name: cart_breakdown
    properties: {font_size: 16}
    type: RichText
    layout_properties: {grid_position: 'FTIEUY,WPJFOA NTTOIB,KWVRRY'}
  - name: buy_btn
    properties: {text: BUY, font_size: 40}
    type: Button
    layout_properties: {grid_position: 'FTIEUY,YLWEQQ'}
    event_bindings: {click: buy_btn_click}
  is_package: true
  code: "from ._anvil_designer import mainTemplate\nfrom anvil import *\nimport anvil.server\n\
    import random\nimport json\n\n\nclass main(mainTemplate):\n    def __init__(self,\
    \ **properties):\n        # Set Form properties and Data Bindings.\n        self.init_components(**properties)\n\
    \n        # Any code you write here will run before the form opens.\n        self.cart\
    \ = {}\n        self.products = []\n        self.product_q = []\n        self.page_num\
    \ = 0\n        self.total_order = 0\n        self.USER_ID = random.choice([234,\
    \ 17850])\n        print(self.USER_ID)\n        self.product_q += self.bring_next_products()\n\
    \        self.load_products()\n\n    \n    def get_next_page(self):\n        self.page_num\
    \ += 1\n        \n        # Case when we need to fetch the next two products\n\
    \        if len(self.products) == 2*self.page_num:\n            if len(self.product_q)\
    \ == 0:\n                self.product_q += self.bring_next_products()\n      \
    \          if len(self.product_q) == 0:\n                    self.page_num -=\
    \ 1\n                    return False\n\n            # load new products\n   \
    \         self.load_products()\n        return True\n\n    def bring_next_products(self):\n\
    \        prod_result = anvil.server.call('get_recomendations', self.USER_ID, json.dumps(self.cart)\
    \ )\n        print(prod_result)\n        return prod_result\n        \n    \n\
    \    def get_prev_page(self):\n        self.page_num -= 1\n        \n        #\
    \ load new products\n        self.load_products()\n        return\n    \n\n  \
    \  def load_products(self, ):\n        self.products += self.product_q[:2]\n \
    \       self.product_q = self.product_q[2:]\n        #self.products \n       \
    \ self.load_product_1()\n        self.load_product_2()\n\n    \n    def load_product_1(self):\n\
    \        # Load information to product one\n        prod_info = self.products[2*self.page_num]\n\
    \        self.img_prod1.source = prod_info['image_url']\n        self.name_prod1.content\
    \ = \"**\" + prod_info['product_name'] + \"**\"\n        self.price_prod1.content\
    \ = \"$\" + str(prod_info['price'])\n\n        if str(prod_info['product_id'])\
    \ in self.cart:\n            self.remove_prod1.visible = True\n        else:\n\
    \            self.remove_prod1.visible = False\n        return\n\n    \n    def\
    \ load_product_2(self):\n        # Load information to product two\n        prod_info\
    \ = self.products[2*self.page_num+1]\n        self.img_prod2.source = prod_info['image_url']\n\
    \        self.name_prod2.content = \"**\" + prod_info['product_name'] + \"**\"\
    \n        self.price_prod2.content = \"$\" + str(prod_info['price'])\n\n     \
    \   if str(prod_info['product_id']) in self.cart:\n            self.remove_prod2.visible\
    \ = True\n        else:\n            self.remove_prod2.visible = False\n     \
    \   return\n\n    \n    def next_btn_click(self, **event_args):\n        \"\"\"\
    This method is called when the button is clicked\"\"\"\n        if not self.get_next_page():\n\
    \            return\n        \n        if not self.prev_btn.visible:\n       \
    \     self.prev_btn.visible = True\n        return\n\n    \n    def prev_btn_click(self,\
    \ **event_args):\n        \"\"\"This method is called when the button is clicked\"\
    \"\"\n        self.get_prev_page()\n        if self.page_num == 0:\n         \
    \   self.prev_btn.visible = False\n        return\n\n    \n    def buy_btn_prod1_click(self,\
    \ **event_args):\n        \"\"\"This method is called when the button is clicked\"\
    \"\"\n        prod_info = self.products[2*self.page_num]\n        self.total_order\
    \ += float(prod_info['price'])\n        self.update_total_amount()\n        self.add_product_to_cart(prod_info[\"\
    product_id\"], prod_info[\"product_name\"])\n        self.remove_prod1.visible\
    \ = True\n        return\n\n    \n    def buy_btn_prod2_click(self, **event_args):\n\
    \        \"\"\"This method is called when the button is clicked\"\"\"\n      \
    \  prod_info = self.products[2*self.page_num+1]\n        self.total_order += float(prod_info['price'])\n\
    \        self.update_total_amount()\n        self.add_product_to_cart(prod_info[\"\
    product_id\"], prod_info[\"product_name\"])\n        self.remove_prod2.visible\
    \ = True\n        return\n\n    \n    def update_total_amount(self):\n       \
    \ self.label_total_amount.text = f\"${abs(self.total_order):.2f}\"\n\n\n    def\
    \ add_product_to_cart(self, prod_id, prod_name):\n        prod_id = str(prod_id)\n\
    \        if prod_id in self.cart:\n            self.cart[prod_id][\"qty\"] +=\
    \ 1\n        else:\n            self.cart[prod_id] = {\"qty\":1, \"name\":prod_name}\n\
    \n        self.update_cart_info()\n\n    \n    def remove_product_from_cart(self,\
    \ prod_id):\n        prod_id = str(prod_id)\n        if self.cart[prod_id][\"\
    qty\"] > 0:\n            self.cart[prod_id][\"qty\"] -= 1\n\n        if self.cart[prod_id][\"\
    qty\"] == 0:\n            self.cart.pop(prod_id)\n        self.update_cart_info()\n\
    \n    \n    def remove_prod1_click(self, **event_args):\n        \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n        prod_info = self.products[2*self.page_num]\n\
    \        self.remove_product_from_cart(prod_info[\"product_id\"])\n        self.total_order\
    \ -= prod_info[\"price\"]\n        self.update_total_amount()\n\n        if not\
    \ str(prod_info[\"product_id\"]) in self.cart:\n            self.remove_prod1.visible\
    \ = False\n        return\n\n    \n    def remove_prod2_click(self, **event_args):\n\
    \        \"\"\"This method is called when the button is clicked\"\"\"\n      \
    \  prod_info = self.products[2*self.page_num+1]\n        self.remove_product_from_cart(prod_info[\"\
    product_id\"])\n        self.total_order -= prod_info[\"price\"]\n        self.update_total_amount()\n\
    \n        if not str(prod_info[\"product_id\"]) in self.cart:\n            self.remove_prod2.visible\
    \ = False\n        return\n\n    \n    def buy_btn_click(self, **event_args):\n\
    \        \"\"\"This method is called when the button is clicked\"\"\"\n      \
    \  if self.total_order <= 0:\n            return\n        \n        alert(f'Your\
    \ order has been placed, please head inside the convinience store to pick up your\
    \ products!')\n        # reload site\n        open_form('main')\n\n    def update_cart_info(self):\n\
    \        \"\"\"This method is called when the button is clicked\"\"\"\n      \
    \  final_str = \"Your cart:\\n\\n---\\n\\n\"\n        for p in self.cart:\n  \
    \          contents = self.cart[p]\n            final_str += f'{contents[\"name\"\
    ]}: \\t\\t{contents[\"qty\"]}\\n'\n        self.cart_breakdown.content = final_str\n\
    \n        \n"
  class_name: main
  id: '1706980536083185955556066.01443'
- is_package: true
  container: {type: ColumnPanel}
  components: []
  code: "from ._anvil_designer import ItemTemplate1Template\nfrom anvil import *\n\
    import anvil.server\n\nclass ItemTemplate1(ItemTemplate1Template):\n    def __init__(self,\
    \ **properties):\n        # Set Form properties and Data Bindings.\n        self.init_components(**properties)\n\
    \n        # Any code you write here will run before the form opens.\n"
  class_name: main.ItemTemplate1
  id: '1706980653882238527560555.94092'
startup: {type: form, module: main}
package_name: Dover_Fueling
allow_embedding: false
name: Dover_Fueling
runtime_options: {version: 2, client_version: '3', server_version: python3-sandbox,
  server_spec: null}
metadata: {title: Dover Checkout, logo_img: 'asset:DFS.png'}
startup_form: null
dependency_order: []
dependency_ids: {}
dependency_code: {}
theme:
  templates:
  - name: Standard Page
    description: ''
    img: null
    form:
      class_name: Form
      is_package: true
      container:
        type: HtmlTemplate
        properties: {html: '@theme:standard-page.html'}
      components:
      - type: ColumnPanel
        properties: {}
        name: content_panel
        layout_properties: {slot: default}
      code: "from ._anvil_designer import $NAME$Template\nfrom anvil import *\n\n\
        class $NAME$($NAME$Template):\n\n  def __init__(self, **properties):\n   \
        \ # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
        \n    # Any code you write here will run before the form opens.\n    \n"
  parameters:
    roles: []
  assets:
  - {name: DFS.png, content: ,
    id: '1707007600609441033300073.71387'}
  - {name: standard-page.html, content: PGRpdiBhbnZpbC1zbG90LXJlcGVhdD0iZGVmYXVsdCI+CjwvZGl2PgoKPGNlbnRlciBzdHlsZT0iY29sb3I6Izg4ODsgbWFyZ2luOiA1MHB4OyI+CiAgPGk+VGhpcyBpcyBhIHBsYWNlaG9sZGVyIGZvciB5b3VyIGFwcCdzIGN1c3RvbSBIVE1MLiBFZGl0IGl0IGJ5IGNoYW5naW5nIHRoZSB0aGVtZSBhc3NldHMuPC9pPgo8L2NlbnRlcj4K,
    id: BTGTTKHJRHEHISVMFI52Z7YINXXY2HV3}
  - {name: theme.css, content: '', id: DJP2A5U3E2QATKMNC2QUBJQYDWM225ZR}
server_modules: []
uplink_visible: true
